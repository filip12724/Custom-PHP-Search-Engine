a:2:{i:0;s:19:"http://ad.turn.com/";i:1;s:17855:"<!DOCTYPE html>
<html>
<head>
    <title>Login - Amobee</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <meta name="description" content="" />
    <meta name="keywords" content="" />

    <script language="javascript">

        // If the user navigated here directly, take them to the main login page instead which handles checking if the user is already logged in
        if (window.location.pathname.indexOf("loginSSO.htm") != -1) {
            window.location.href = "/app/account/index.htm" + window.location.search + window.location.hash;
        }

        if (window.location.hostname === 'apac-console.turn.com') {
            window.location.replace(window.location.href.replace('apac-console.turn.com', 'console.turn.com') + window.location.search + window.location.hash);
        }

        // iframe embed catch
        if(window != window.top)
        {
            window.top.location.href = window.location.href + window.location.search + window.location.hash;
        }

    </script>
    <!--Ref: https://developer.okta.com/code/javascript/okta_sign-in_widget -->
    <!--Ref: https://developer.okta.com/code/javascript/-->
    <!--Ref: https://github.com/okta/okta-signin-widget-->

    <script src="/scripts/login/okta-auth-js_2.0.1.min.js"
            type="text/javascript"></script>
    <!-- Latest CDN production Javascript and CSS: 2.21.0 -->
    <script
            src="/scripts/login/okta-sign-in_2.21.0.min.js"
            type="text/javascript"></script>
    <link
            href="/include/css/okta-sign-in_2.21.0.min.css?version=250427"
            type="text/css"
            rel="stylesheet"/>

    <!-- Theme file: Customize or replace this file if you want to override our default styles -->
    <link
            href="/include/css/okta-theme_2.21.0.css?version=250427"
            type="text/css"
            rel="stylesheet"/>
	<link rel="stylesheet" type="text/css" href="/include/css/loginSSO.css?version=250427">

</head>

<!-- start content -->
<body id="console">

<!-- start main -->
<div id="wrapper">
    <div id="noJavascript">
        <p>You do not have a browser that supports DHTML.<br />
            Please use a modern browser in order to ensure correct functionality.</p>
    </div>
    <script type="text/javascript">
        // <![CDATA
        // show no script tag if no js
        document.getElementById('noJavascript').style.display = 'none';
        // ]]>
    </script>

    <!-- IF SYSTEM MESSAGE -->
                    
    
    <!-- ENDIF SYSTEM MESSAGE -->

    <!-- IF ERROR MESSAGE -->
        
        
    <!-- SSO widget error message -->
    <div id="sso-error"></div>
    <!-- end SSO widget error message -->

    <!-- ENDIF ERROR MESSAGE -->

    <!-- start login form -->
                        <form name=f id="loginform" action='/app/account/index.htm?' style="display: none;" method=post>
        <input type="hidden" name="loginPage" value="true">
        <input type="hidden" name='access_token' id='access_token' value="">
        <input type="hidden" name="urlHash" id="urlHash" value="">
    </form>
    <!--end login form -->

    <div class="container-fluid">
        <div class="row">
            <div id="widget-container"></div>
        </div>
    </div>

	<div class="content loader">
		<div class="info">
			<p> Loading Nexxen Platform </p>
			<div class="loading-icon"></div>
		 </div>
	</div>


</div><!-- #wrapper -->

<script>

    function GetCookie(name) {
        var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
        return v ? v[2] : null;
    }

    function SetCookie (name,value,expires,path,domain) {
        document.cookie = name + "=" + encodeURI(value) +
            ((expires) ? "; expires=" + expires.toUTCString() : "") +
            ((path) ? "; path=" + path : "") +
            ((domain) ? "; domain=" + domain : "") +
            "; SameSite=Strict";
    }
    //  Function to delete a cookie. (Sets expiration date to start of epoch)
    function DeleteCookie (name,path,domain) {
        document.cookie = name + "=" +
            ((path) ? "; path=" + path : "") +
            ((domain) ? "; domain=" + domain : "") +
            "; expires=Thu, 01-Jan-70 00:00:01 GMT";
    }

    function escapeHtml(text) {
        var entityMap = {
            '&' : '&amp;',
            '<' : '&lt;',
            '>' : '&gt;',
            '"' : '&quot;',
            "'" : '&apos;',
        };
        if (text != null) {
            return String(text).replace(/[&<>"']/g, function (s) {
              return entityMap[s];
          });
        }
        return text;
    }

    function checkForQueryStringErrors() {
        let urlParams = new URLSearchParams(window.location.search);
        if (!window.location.search && window.location.hash) {
            urlParams = new URLSearchParams(window.location.hash.split("#")[1]);
        }

        let errorTitle = "";
        let errorDesc = "";

        if (urlParams.has("error")) {
            // Replace '+' with space
            let encodedErrorTitle = urlParams.get("error").replace(/\+/g, '%20');
            errorTitle = decodeURIComponent(encodedErrorTitle);
        }
        if (urlParams.has("error_description")) {
            let encodedErrorDesc = urlParams.get("error_description").replace(/\+/g, '%20');
            errorDesc = decodeURIComponent(encodedErrorDesc);
        }

        if (errorTitle || errorDesc) {
            if (errorTitle && errorDesc ) {
                displaySSOError(escapeHtml(errorTitle) + "<br/>" + escapeHtml(errorDesc));
            } else if (errorTitle) {
                displaySSOError(escapeHtml(errorTitle));
            } else {
                displaySSOError(escapeHtml(errorDesc));
            }
            // Remove everything after the query string parameter so the SSO redirectUri works again
            window.history.replaceState(null, null, window.location.pathname);
        }
    }

    function clearSSOErrors() {
        document.getElementById("sso-error").innerHTML = "";
    }

    function displaySSOError(errorHtml) {
        document.getElementById("sso-error").insertAdjacentHTML('afterbegin',
            "<div class='msg-container'>" +
                "<p class='error'>" +
                    errorHtml +
                "</p>" +
            "</div>");
    }

    function getQueryStringValue (key) {
        if (!key) {
            return "";
        }
        return decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent(key).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
    }

    function parseFromHashAndSubmitIfExists() {
        if (!window.location.hash) {
            return;
        }

        let hashJson = getHashAsJson();
        let accessToken = hashJson['access_token'];
        if (accessToken) {
            setFormAndSubmit(accessToken);
        }
    }

    function getHashAsJson() {
        if (!window.location.hash) {
            return {};
        }

        let hashArray = window.location.hash.replace("#", "").split("&");
        let hashJson = {};
        for (let i = 0; i < hashArray.length; i++) {
            let splitHash = hashArray.split("=");
            hashJson[splitHash[0]] = splitHash[1];
        }

        return hashJson;
    }

    function setFormAndSubmit(accessToken) {
        cleanUpOktaCookies();

        document.getElementsByClassName('loader')[0].style.display = "block";
        clearSSOErrors();
        document.getElementById('access_token').value = accessToken;
        document.getElementById('urlHash').value = sessionStorage.getItem("urlHash");
        sessionStorage.removeItem("urlHash");
        document.getElementById("loginform").submit();
    }

    function renderSignInWidget() {
        if (document.getElementById("widget-container").innerHTML) {
            signIn.remove();
        }

        signIn.renderEl(
            {el: '#widget-container'},
            function(res) {
                if (res.status === 'IDP_DISCOVERY') {
                    discoverIdPAndRedirect();
                }
                clearSSOErrors();
            },
            function(err) {
                console.error(err);
                clearSSOErrors();
                checkForQueryStringErrors();
                displaySSOError("Something went wrong when attempting to render sign-in widget.<br/>" + err);
            }
        );

        setTimeout(function() {
            if (document.querySelector('form')) {
                document.querySelector('form').autocomplete="on";
            }
            if (document.querySelector('#idp-discovery-username')) {
                document.querySelector('#idp-discovery-username').autocomplete="email";
            }
            if (document.querySelector('#idp-discovery-submit')) {
                document.querySelector('#idp-discovery-submit').addEventListener('click', function() {
                    setTimeout(function() {
                        if (document.querySelector('#okta-signin-username')) {
                            document.querySelector('#okta-signin-username').autocomplete = "email";
                        }
                        if (document.querySelector('#okta-signin-password')) {
                            document.querySelector('#okta-signin-password').autocomplete = "current-password";
                        }
                    }, 500);
                });
            }
            if (document.querySelector('#okta-signin-username')) {
                document.querySelector('#okta-signin-username').autocomplete = "email";
            }
            if (document.querySelector('#okta-signin-password')) {
                document.querySelector('#okta-signin-password').autocomplete = "current-password";
            }
        }, 500);
    }

    function discoverIdPAndRedirect() {

        let username = GetCookie("userToLogin");

        let xhttp = new XMLHttpRequest();
        xhttp.open('GET', 'https://ssomgr-api.amobee.com/users/check/' + username, false);
        xhttp.setRequestHeader("Sso-App-Context", 'APP_TURN_PLATFORM');
        try {
            xhttp.send();
        } catch(e) {
            console.error("Something went wrong with API call to SSO API. Continuing anyway.", e);
            redirectUserToLoginIdP();
            return;
        }

        if (xhttp.status < 400 || xhttp.status >= 500) {
            if (xhttp.status >= 500) {
                console.error("Something went wrong with account check. Continuing anyway.", this.status, this.responseText);
            }

            redirectUserToLoginIdP();

        } else {
            clearSSOErrors();
            signIn.remove();
            var prevUsername = oktaSignInConfig.username;
            var prevIdpDiscovery = oktaSignInConfig.features.idpDiscovery;

            // Update to disable idp for continuous process
            oktaSignInConfig.username = username;
            oktaSignInConfig.features.idpDiscovery = false;
            signIn = constructSignIn(oktaSignInConfig);

            renderSignInWidget();

            signIn.on('afterRender', function(context) {
                if (context.controller === 'primary-auth') {
                    // Revert okta config stored
                    oktaSignInConfig.username = prevUsername;
                    oktaSignInConfig.features.idpDiscovery = prevIdpDiscovery;

                    // Disable username field
                    var usernameInput = document.getElementById('okta-signin-username');
                    usernameInput.setAttribute('disabled', 'true');
                    usernameInput.parentElement.className += ' o-form-disabled';
                }
            });
        }
    }

    function redirectUserToLoginIdP() {
        oktaAuthClient.webfinger({
            resource: 'acct:' + usernameForLogin
        }).then(function(res) {
            try {
                cleanUpOktaCookies();
                oktaAuthClient.token.getWithRedirect({
                    scopes: [
                        'openid',
                        'email',
                        'profile'
                    ],
                    idp: res.links[0].properties["okta:idp:id"],
                    responseType: ['id_token', 'token']
                });
            } catch(err) {
                console.error(err);
                clearSSOErrors();
                displaySSOError("Something went wrong when attempting to redirect to identity provider.<br/>" + err);
            }

        }).fail(function(err) {
            displaySSOError("Unable to complete webfinger call.<br/>" + err);
        });
    }

    function cleanUpOktaCookies() {
        DeleteCookie("okta-oauth-state", "/");
        DeleteCookie("okta-oauth-nonce", "/");
        DeleteCookie("okta-oauth-redirect-params", "/");
        DeleteCookie("okta-oauth-redirect-params", "/login");
        DeleteCookie("okta-oauth-redirect-params", "/app/account");
    }

    function constructSignIn(config) {
        var signIn = new OktaSignIn(config);
        signIn.on('afterError', function(context, error) {
            console.error("Error Context", context);
            console.error("Error", error);

            if (error.name === 'AuthApiError') {
                document.querySelector('#okta-signin-password').value = '';
            }
        });
        return signIn;
    }

    // When using an IdP, the cookie returns partially encoded, which causes okta auth sdk to fail its parsing of the cookie
    if (GetCookie("okta-oauth-redirect-params")) {
        document.cookie = "okta-oauth-redirect-params=" + decodeURI(GetCookie("okta-oauth-redirect-params")).replace(/\%2C/g, ",");
    }


	if (window.location.hash && !sessionStorage.getItem("urlHash")) {
		sessionStorage.setItem("urlHash", window.location.hash);
	}

	var allowIdp = getQueryStringValue("idp").toLowerCase() !== 'false' && 'true' === 'true';
    var fromIdp = getQueryStringValue("fromLogin");
    var recoveryToken = getQueryStringValue("recoveryToken");
    var loginHint = getQueryStringValue("login_hint");

    let redirectUri = window.location.href.split(/[?#]/)[0];

    let splitHref = window.location.href.split('?');
    var queryStringParams = splitHref.length > 1 ? splitHref[1] : null;

    window.history.replaceState(null, null, window.location.href.split('?')[0]);


    var oktaUrl = 'https://amobee-platform.okta.com';
    var oktaAuthConfig = {
        url: oktaUrl,
        issuer: oktaUrl + '/oauth2/default',
        clientId: '0oagvz09ya6U3JBAs356',
        redirectUri: redirectUri,
        authorizeUrl: oktaUrl + '/oauth2/default/v1/authorize',
        userinfoUrl: oktaUrl + '/oauth2/default/v1/userinfo',
        tokenManager: {
            autoRenew: false,
            storage: 'sessionStorage'
        }
    };
    var oktaAuthClient = new OktaAuth(oktaAuthConfig);

    var usernameForLogin;

    var oktaSignInConfig = {
        helpLinks: {
            forgotPassword: '/login/forgotPasswordSSO.htm'
        },
        baseUrl: oktaUrl,
        clientId: '0oagvz09ya6U3JBAs356',
        redirectUri: redirectUri,
        authParams: {
            issuer: 'default',
            responseType: ['id_token', 'token'],
            display: 'page'
        },
        idpDiscovery: {
            requestContext: window.location.href
        },
        features: {
            idpDiscovery: allowIdp
        },
        language: 'en',                       // Full list: https://github.com/okta/okta-signin-widget#language-and-text
        logo: 'https://assets.amobee.com/logo_black_small.png',
        i18n: {
            //Overrides default text when using English. Override other languages by adding additional sections.
            'en': {
                'primaryauth.title': 'Welcome to the Nexxen Advertising Platform',   // Changes the sign in text
                'primaryauth.username.placeholder': 'Username',
                'primaryauth.username.tooltip': 'Username',
                'primaryauth.submit': 'Sign in',  // Changes the sign in button
                'password.expiring.subtitle': 'Your account password will expire soon.  Please update your password before your account is locked.',
                'password.forgot.email.or.username.placeholder': 'Email',
                'password.forgot.email.or.username.tooltip': 'Email',
                'password.forgot.sendEmail': 'Reset Password via Email',
                'error.auth.lockedOut': 'Your account has been locked for 60 minutes.  Please contact your administrator or your Nexxen Support team.'

                // More e.g. [primaryauth.username.placeholder,  primaryauth.password.placeholder, needhelp, etc.].
                // Full list here: https://github.com/okta/okta-signin-widget/blob/master/packages/@okta/i18n/dist/properties/login.properties
            }
        },
        colors: {
            brand: '#3BB0C9',
        },
        transformUsername: function(username) {
            usernameForLogin = username;
            return username;
        }
    };

    if (recoveryToken) {
		oktaSignInConfig.recoveryToken = recoveryToken;
		let expireInSecondsFromNow = 1800;
		let expireIn = new Date();
		expireIn.setTime(expireIn.getTime() + (expireInSecondsFromNow * 1000));
		SetCookie("recoveryToken", recoveryToken, expireIn, '/', 'platform.amobee.com');
	}

    if (loginHint) {
        // Automatically decodes the URI if needed
        oktaSignInConfig.username = loginHint;
    }

    var signIn = constructSignIn(oktaSignInConfig);

                        window.location.href = "https://login.amobee.com/portal/amobee/dsp/login?platformRedirectionUrl=https://platform.amobee.com/app/account/index.htm";
    
    checkForQueryStringErrors();
</script>

</body>
</html>
";}